@page "/ai-assistance"
@inject MedplumWrapperApiHttpClient MedPlumHttpClient
@inject SecureStorageService SecureStorage
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text.RegularExpressions

<h3 class="text-center text-primary my-4">Ask Your AI Health Assistant</h3>
<div class="container">
	<!-- Prompt Input -->
	<div class="mb-3">
		<label for="userPrompt" class="form-label fw-bold">Your Health Question</label>
		<textarea id="userPrompt" class="form-control shadow-sm" @bind="userPrompt" rows="3"
		placeholder="Ask something like: How is my sleep quality lately?"></textarea>
	</div>
	<div class="d-grid d-sm-flex justify-content-sm-end">
		<button class="btn btn-primary px-4 py-2" @onclick="SubmitPrompt" disabled="@isLoading">
			@if (isLoading)
			{
				<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
				<span class="ms-2">Thinking...</span>
			}
			else
			{
				<span>Ask AI</span>
			}
		</button>
	</div>

	<!-- Predefined Prompts -->
	<div class="mt-4">
		<h5>Quick Questions</h5>
		<div class="d-flex flex-wrap gap-2">
			@foreach (var prompt in predefinedPrompts)
			{
				<button class="btn btn-outline-secondary rounded-pill shadow-sm px-3 py-1"
				@onclick="@(() => SetPrompt(prompt))">
					@prompt
				</button>
			}
		</div>
	</div>

	<!-- AI Response Section -->
	@if (!string.IsNullOrWhiteSpace(aiResponse))
	{
		<div class="mt-4 p-4 border rounded bg-light fade-in">
			<h5 class="text-success">AI Response:</h5>
			<div class="mb-0 ai-response-html" style="white-space: pre-line;" @key="aiResponse">
				@((MarkupString)aiResponse)
			</div>
		</div>
	}
</div>

@code {
	private string userPrompt = string.Empty;
	private string aiResponse = string.Empty;
	private bool isLoading = false;
	private static HttpClient _httpClient;
	private static SecureStorageService _secureStorage;

	protected override void OnInitialized()
	{
		_secureStorage = SecureStorage;
		_httpClient = MedPlumHttpClient.Client;
	}

	private List<string> predefinedPrompts = new()
	{
		"How is my blood pressure trend?",
		"Am I getting enough quality sleep?",
		"What can I do to reduce stress?",
		"How many steps should I take daily?",
		"Should I be concerned about my heart rate?"
	};

	private void SetPrompt(string prompt)
	{
		userPrompt = prompt;
		aiResponse = string.Empty;
	}

	private async Task SubmitPrompt()
	{
		if (string.IsNullOrWhiteSpace(userPrompt))
			return;

		isLoading = true;
		aiResponse = string.Empty;

		// Retrieve patient ID from secure storage
		var vh_patientId = await SecureStorage.GetItemAsync("vh_patient_id");
		var userId = await SecureStorage.GetUserIdAsync();

		// ⚠️ TEMP: fallback for local testing only – remove before production
		if (string.IsNullOrWhiteSpace(vh_patientId))
			vh_patientId = "01978609-4506-72a9-a00e-8083bbf66207"; // TEMP TEST ID

		if (string.IsNullOrWhiteSpace(userId))
			userId = "richie1@gmail.com";

		try
		{
			var requestData = new
			{
				prompt = userPrompt,
				patientId = vh_patientId,
				userId = userId
			};

			var response = await _httpClient.PostAsJsonAsync("/api/Medplum/generate", requestData);

			if (!response.IsSuccessStatusCode)
			{
				aiResponse = "<div class='text-danger'><strong>Sorry:</strong> AI assistant couldn't process your question. Please try again later.</div>";
				return;
			}

			var result = await response.Content.ReadFromJsonAsync<AIResponse>();
			aiResponse = ExtractDivHtml(result?.htmlResponse);
		}
		catch (Exception ex)
		{
			aiResponse = $"<div class='text-danger'>Error: {ex.Message}</div>";
		}
		finally
		{
			isLoading = false;
		}
	}


	public static string ExtractDivHtml(string rawJson)
	{
		if (string.IsNullOrWhiteSpace(rawJson))
			return "<div><p>No response received from AI.</p></div>";

		try
		{
			// Parse the JSON and get the wrapped response string
			var doc = JsonDocument.Parse(rawJson);
			var aiWrapped = doc.RootElement.GetProperty("response").GetString();

			// Clean formatting artifacts like ```html, \n, and escaped quotes
			var cleaned = Regex.Replace(aiWrapped ?? "", @"```html|```", string.Empty)
				.Replace("\\n", "\n")
				.Replace("\\\"", "\"")
				.Trim();

			// Optional: remove repeated blank lines (2+ newlines)
			cleaned = Regex.Replace(cleaned, @"(\n\s*){2,}", "\n");

			return cleaned;
		}
		catch
		{
			return "<div><p>Unable to parse AI response.</p></div>";
		}
	}

	public class AIResponse
	{
		public string htmlResponse { get; set; } = string.Empty;
	}


}
