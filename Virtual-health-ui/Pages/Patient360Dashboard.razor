@page "/dashboard/{emailId}"
@inject MedplumWrapperApiHttpClient MedPlumHttpClient
@using System.Net.Http.Json

<h3 class="text-primary mb-4">Patient 360 Dashboard</h3>

@if (generalLabs == null || vitals == null || imagingResults == null || surveyScore == -1)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">Lab Results</div>
                <div class="card-body p-2">
                    <table class="table table-sm mb-0">
                        <thead>
                            <tr>
                                <th>Test</th>
                                <th>Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var lab in generalLabs.Take(6))
                            {
                                <tr>
                                    <td>@lab.CodeDisplay</td>
                                    <td>@lab.Value</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-success text-white">Vitals</div>
                <div class="card-body p-2">
                    <table class="table table-sm mb-0">
                        <thead>
                            <tr>
                                <th>Metric</th>
                                <th>Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var v in vitals.Take(6))
                            {
                                <tr>
                                    <td>@v.CodeDisplay</td>
                                    <td>@v.Value</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-info text-white">Imaging</div>
                <div class="card-body p-2">
                    <ul class="mb-0">
                        @foreach (var img in imagingResults.Take(3))
                        {
                            <li><strong>@img.CodeDisplay:</strong> @img.Value</li>
                        }
                    </ul>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-warning text-dark">Mental Health</div>
                <div class="card-body">
                    <p><strong>PHQ-9 Score:</strong> @surveyScore</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-secondary text-white">Activity Summary</div>
                <div class="card-body p-2">
                    <ul class="mb-0">
                        @foreach (var item in activitySummary.Take(3))
                        {
                            <li><strong>@item.CodeDisplay:</strong> @item.Value</li>
                        }
                    </ul>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-dark text-white">Lifestyle</div>
                <div class="card-body p-2">
                    <ul class="mb-0">
                        @foreach (var item in lifestyleInfo.Take(3))
                        {
                            <li><strong>@item.CodeDisplay:</strong> @item.Value</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string emailId { get; set; }

    private PatientProfileInput profile;
    private List<LabResultItem> generalLabs = new();
    private List<LabResultItem> imagingResults = new();
    private List<LabResultItem> vitals = new();
    private List<LabResultItem> activitySummary = new();
    private List<LabResultItem> lifestyleInfo = new();
    private int surveyScore = -1;
    private static HttpClient _httpClient;

    protected override async Task OnInitializedAsync()
    {
        emailId = "john.doe@example";
        _httpClient = MedPlumHttpClient.Client;
        profile = await _httpClient.GetFromJsonAsync<PatientProfileInput>($"api/medplum/patient-full-profile/{emailId}.com");
        if (profile?.PatientId != null)
        {
            profile.PatientId = "019679d5-7564-763e-ba0b-2574c060329d";
            generalLabs = GetDistinctLatestRecords((await _httpClient.GetFromJsonAsync<LabResultResponse>($"/api/Medplum/patient-lab-results/{profile.PatientId}"))?.GeneralLabs ?? new());
            vitals = GetDistinctLatestRecords(await _httpClient.GetFromJsonAsync<List<LabResultItem>>($"/api/Medplum/current-wearable-observations/{profile.PatientId}") ?? new());

            var providerData = await _httpClient.GetFromJsonAsync<ProviderObservationResponse>($"/api/Medplum/provider-reported-observations/{profile.PatientId}");
            //vitals = GetDistinctLatestRecords(providerData?.VitalSigns ?? new());
            lifestyleInfo = GetDistinctLatestRecords(providerData?.SocialHistory ?? new());
            activitySummary = GetDistinctLatestRecords(providerData?.Activity ?? new());

            var surveyItem = providerData?.Survey?.FirstOrDefault(x => x.CodeDisplay.Contains("PHQ-9"));
            if (surveyItem != null && int.TryParse(surveyItem.Value?.Split(' ')[0], out int score))
            {
                surveyScore = score;
            }
        }
    }

    private List<LabResultItem> GetDistinctLatestRecords(List<LabResultItem> items)
    {
        return items
            .GroupBy(item => item.CodeDisplay)
            .Select(group => group.OrderByDescending(item => item.EffectiveDateTime).First())
            .ToList();
    }

    public class LabResultItem
    {
        public string CodeDisplay { get; set; }
        public string Value { get; set; }
        public DateTime EffectiveDateTime { get; set; }
    }

    public class LabResultResponse
    {
        public List<LabResultItem> GeneralLabs { get; set; }
    }

    public class ProviderObservationResponse
    {
        public List<LabResultItem> VitalSigns { get; set; }
        public List<LabResultItem> SocialHistory { get; set; }
        public List<LabResultItem> Activity { get; set; }
        public List<LabResultItem> Survey { get; set; }
    }

    public class PatientProfileInput
    {
        public string PatientId { get; set; }
        public string PatientName { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Gender { get; set; }
        public string BirthDate { get; set; }
        public string PhoneNumber { get; set; }
    }
}
