@page "/dashboard"
@inject MedplumWrapperApiHttpClient MedPlumHttpClient
@inject SecureStorageService SecureStorage
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using System.Net.Http.Json
@using System.Text.RegularExpressions
@using System.Text.Json
@using VirtualHealth.UI.Models

<h3 class="text-primary mb-4 d-flex justify-content-between align-items-center">
    🩺 Patient 360 Health-Overview
    <button class="btn btn-outline-primary btn-sm" @onclick="ShowHealthTips">💡 View AI Health Tips</button>
</h3>
@if (generalLabs == null || vitals == null || imagingResults == null || surveyScore == "-1")
{
    <img src="ai-loading.gif" alt="Loading AI..." style="height:48px;" />
}
else
{
    <div class="container-fluid px-2 px-md-5">

    <div class="accordion" id="healthAccordion">

        <!-- Prescriptions -->
        @if (prescriptions.Any())
        {
            <div class="accordion-item">
                <h2 class="accordion-header" id="headingRx">
                    <button class="accordion-button collapsed rx" type="button"
                            data-bs-toggle="collapse" data-bs-target="#collapseRx"
                            aria-expanded="false" aria-controls="collapseRx">
                        💊 Prescriptions
                    </button>
                </h2>
                <div id="collapseRx" class="accordion-collapse collapse show"
                     aria-labelledby="headingRx" data-bs-parent="#healthAccordion">
                    <div class="accordion-body p-2">
                        <div class="table-responsive">
                            <table class="table table-sm table-bordered align-middle mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th style="width:20%;">Medicine</th>
                                        <th style="width:25%;">Dosage</th>
                                        <th style="width:50%;">Notes</th>
                                        <th class="text-center" style="width:5%;">⏰</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var rx in prescriptions)
                                    {
                                        <tr>
                                            <td>@rx.MedicationName</td>
                                            <td>@rx.DosageText</td>
                                            <td class="prescription-notes">@rx.Instructions</td>
                                            <td class="text-center">
                                                <button class="btn btn-sm btn-outline-secondary"
                                                        title="Set Reminder" style="min-width:34px;"
                                                        @onclick="() => SetReminder(rx)">
                                                    <i class="bi bi-calendar-plus fs-6"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Lab Results -->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingLab">
                <button class="accordion-button collapsed lab" type="button"
                        data-bs-toggle="collapse" data-bs-target="#collapseLab"
                        aria-expanded="false" aria-controls="collapseLab">
                    🧪 Lab Results Summary
                </button>
            </h2>
            <div id="collapseLab" class="accordion-collapse collapse"
                 aria-labelledby="headingLab" data-bs-parent="#healthAccordion">
                <div class="accordion-body p-2">
                    <div class="table-responsive">
                        <table class="table table-sm table-bordered mb-0">
                            <thead class="table-light">
                                <tr><th>Test</th><th>Result</th><th>Interpretation</th></tr>
                            </thead>
                            <tbody>
                                @foreach (var lab in generalLabs.Take(6))
                                {
                                    <tr>
                                        <td>@lab.CodeDisplay</td>
                                        <td>@lab.Value</td>
                                        <td>@GetLabInterpretation(lab.CodeDisplay, lab.Value)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Vitals -->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingVitals">
                <button class="accordion-button collapsed vitals" type="button"
                        data-bs-toggle="collapse" data-bs-target="#collapseVitals"
                        aria-expanded="false" aria-controls="collapseVitals">
                    ❤️ Vital Signs
                </button>
            </h2>
            <div id="collapseVitals" class="accordion-collapse collapse"
                 aria-labelledby="headingVitals" data-bs-parent="#healthAccordion">
                <div class="accordion-body p-2">
                    <div class="table-responsive">
                        <table class="table table-sm table-bordered mb-0">
                            <thead class="table-light">
                                <tr><th>Metric</th><th>Value</th><th>Notes</th></tr>
                            </thead>
                            <tbody>
                                @foreach (var v in vitals.Take(6))
                                {
                                    <tr>
                                        <td>@v.CodeDisplay</td>
                                        <td>@v.Value</td>
                                        <td>@GetVitalNote(v.CodeDisplay, v.Value)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Mental Health -->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingMental">
                <button class="accordion-button collapsed mental" type="button"
                        data-bs-toggle="collapse" data-bs-target="#collapseMental"
                        aria-expanded="false" aria-controls="collapseMental">
                    🧠 Mental Health
                </button>
            </h2>
            <div id="collapseMental" class="accordion-collapse collapse"
                 aria-labelledby="headingMental" data-bs-parent="#healthAccordion">
                <div class="accordion-body">
                    <p class="mb-1"><strong>PHQ‑9 Depression Score:</strong> @surveyScore</p>
                    <ul class="mb-0 ps-3">
                        <li>@GetSurveyInterpretation(surveyScore)</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Imaging -->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingImaging">
                <button class="accordion-button collapsed imaging" type="button"
                        data-bs-toggle="collapse" data-bs-target="#collapseImaging"
                        aria-expanded="false" aria-controls="collapseImaging">
                    🖼️ Imaging Reports
                </button>
            </h2>
            <div id="collapseImaging" class="accordion-collapse collapse"
                 aria-labelledby="headingImaging" data-bs-parent="#healthAccordion">
                <div class="accordion-body">
                    <ul class="mb-0 ps-3">
                        <li><strong>Ultrasound Abdomen:</strong> Gallbladder and liver ultrasound normal. No gallstones. Biliary tree not dilated.</li>
                        <li><strong>CT Abdomen:</strong> Liver mildly enlarged. No evidence of mass, ascites, or free air. Kidneys normal.</li>
                        <li><strong>MRI Brain:</strong> No acute intracranial hemorrhage, mass effect, or midline shift. Brain MRI appears normal.</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Lifestyle -->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingLifestyle">
                <button class="accordion-button collapsed lifestyle" type="button"
                        data-bs-toggle="collapse" data-bs-target="#collapseLifestyle"
                        aria-expanded="false" aria-controls="collapseLifestyle">
                    🏃 Activity & Lifestyle Summary
                </button>
            </h2>
            <div id="collapseLifestyle" class="accordion-collapse collapse"
                 aria-labelledby="headingLifestyle" data-bs-parent="#healthAccordion">
                <div class="accordion-body">
                    <div class="row">
                        <div class="col-md-6 col-12 mb-2 mb-md-0">
                            <strong>Activity</strong>
                            <ul class="mb-0 ps-3">
                                @foreach (var item in activitySummary.Take(3))
                                {
                                    <li><strong>@item.CodeDisplay:</strong> @item.Value</li>
                                }
                            </ul>
                        </div>
                        <div class="col-md-6 col-12">
                            <strong>Lifestyle</strong>
                            <ul class="mb-0 ps-3">
                                @foreach (var item in lifestyleInfo.Take(3))
                                {
                                    <li><strong>@item.CodeDisplay:</strong> @item.Value</li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div> <!-- /accordion -->

</div> <!-- /container -->

}

@if (showHealthTipsModal)
{
    <div class="modal fade show d-block" tabindex="-1"
         style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 1050;">
        <div class="modal-dialog modal-xl modal-dialog-centered"
             style="@((!string.IsNullOrWhiteSpace(personalizedHealthHtml) ? "max-width: 98%;" : "max-width: 80%;"))">
            <div class="modal-content animate__animated animate__zoomIn" style="margin: 0 auto; width: 95%;">
                <div class="modal-header">
                    <h5 class="modal-title">🧠 Personalized Health Tips (AI)</h5>
                    <button type="button" class="btn-close" @onclick="HideHealthTips"></button>
                </div>
                <div class="modal-body" style="max-height: 70vh; overflow-y: auto;">

                    @if (isSummaryLoading)
                    {
                        <div class="d-flex align-items-center justify-content-center">
                            <img src="ai-loading.gif" alt="Loading AI recommendations..." style="height:80px; margin-right:0;" />
                        </div>
                    }
                    else
                    {
                        <div class="ai-response-html">
                            @((MarkupString)personalizedHealthHtml)
                        </div>
                    }

                    <p class="text-muted small mt-3">
                        (Generated by AI model. For educational purposes only. Consult your doctor for clinical decisions.)
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="HideHealthTips">Close</button>
                </div>
            </div>
        </div>
    </div>
}


@code {

    private PatientProfileInput profile;
    private List<LabResultItem> generalLabs = new();
    private List<LabResultItem> imagingResults = new();
    private List<LabResultItem> vitals = new();
    private List<LabResultItem> activitySummary = new();
    private List<LabResultItem> lifestyleInfo = new();
    private string surveyScore = "-1";
    private static HttpClient _httpClient;
    private string personalizedHealthHtml = string.Empty;
    private bool showHealthTipsModal = false;
    private bool isSummaryLoading = false;
    private List<PrescriptionItem> prescriptions = new();


    protected override async Task OnInitializedAsync()
    {
        var patientId = await SecureStorage.GetItemAsync("vh_patient_id");
        // ⚠️ TEMP: fallback for local testing only – remove before production
        if (string.IsNullOrWhiteSpace(patientId))
            patientId = "01978609-4506-72a9-a00e-8083bbf66207"; // TEMP TEST ID


        if (string.IsNullOrEmpty(patientId))
        {
            Console.WriteLine("Profile not found, redirecting to Create Profile.");
            Navigation.NavigateTo("/user-profile", forceLoad: true);
            return;
        }

        _httpClient = MedPlumHttpClient.Client;

        if (patientId != null)
        {
            var labResults = await _httpClient.GetFromJsonAsync<LabResultResponse>($"/api/Medplum/patient-lab-results/{patientId}");
            prescriptions = await LoadPrescriptions(patientId);

            if (labResults != null)
            {
                generalLabs = GetDistinctLatestRecords(labResults.GeneralLabs);
                imagingResults = GetDistinctLatestRecords(labResults.ImagingResults);
            }
            var allObservations = GetDistinctLatestRecords(await _httpClient.GetFromJsonAsync<List<LabResultItem>>($"/api/Medplum/current-observations/{patientId}"));
            vitals = allObservations.Where(i => i.Categories == "vital-signs" && (i.CapturedBy.StartsWith("Device") || i.CapturedBy.StartsWith("self"))).ToList();
            activitySummary = allObservations.Where(i => i.Categories == "exam" || i.Categories == "activity").ToList();
            lifestyleInfo = allObservations.Where(i => i.Categories == "social-history" || i.Categories == "lifestyle").ToList();
            surveyScore = allObservations.FirstOrDefault(i => i.Categories == "survey")?.Value ?? "-1";
        }
    }
    private async Task ShowHealthTips()
    {
        showHealthTipsModal = true;
        await LoadPersonalizedHealthSummary();
    }

    private async Task CreateCalendarEvent(string med, string dose, DateTime when)
    {
        var end = when.AddMinutes(15);
        var start = when.ToUniversalTime().ToString("yyyyMMddTHHmmssZ");
        var stop = end.ToUniversalTime().ToString("yyyyMMddTHHmmssZ");

        await JS.InvokeVoidAsync("CalendarExport.downloadICS",
            $"Take {med}", $"Dosage: {dose}", start, stop);
    }

    private async Task<List<PrescriptionItem>> LoadPrescriptions(string patientId)
    {
        var meds = await _httpClient.GetFromJsonAsync<List<JsonElement>>($"/api/Medplum/get-prescription/{patientId}");
        var list = new List<PrescriptionItem>();

        foreach (var med in meds)
        {
            try
            {
                var name = med.GetProperty("medicationCodeableConcept").TryGetProperty("text", out var txtVal)
                            ? txtVal.GetString()
                            : med.GetProperty("medicationCodeableConcept").GetProperty("coding")[0].GetProperty("display").GetString();

                var dosageText = med.GetProperty("dosageInstruction")[0].GetProperty("text").GetString();
                var authoredOn = med.GetProperty("authoredOn").GetDateTime();

                var notes = med.TryGetProperty("note", out var notesArr) && notesArr.ValueKind == JsonValueKind.Array
                            ? string.Join("; ", notesArr.EnumerateArray().Select(n => n.GetProperty("text").GetString()))
                            : "";

                var freq = ExtractFrequency(dosageText ?? "");

                list.Add(new PrescriptionItem
                {
                    MedicationName = name ?? "Unknown",
                    DosageText = dosageText ?? "",
                    Frequency = freq,
                    Instructions = notes,
                    StartDate = authoredOn
                });
            }
            catch { continue; }
        }

        return list;
    }
    
    private static string ExtractFrequency(string dosageText)
    {
        if (string.IsNullOrWhiteSpace(dosageText)) return "Once";

        var text = dosageText.ToLowerInvariant();
        if (text.Contains("every 8 hours") || text.Contains("three times")) return "Thrice";
        if (text.Contains("every 6 hours") || text.Contains("four times")) return "FourTimes";
        if (text.Contains("twice")) return "Twice";
        if (text.Contains("daily") || text.Contains("once")) return "Once";

        return "Once";
    }

    private async Task SetReminder(PrescriptionItem rx)
    {
        var times = rx.Frequency switch
        {
            "Once" => new[] { 9 },
            "Twice" => new[] { 9, 21 },
            "Thrice" => new[] { 8, 14, 20 },
            "FourTimes" => new[] { 6, 12, 18, 22 },
            _ => new[] { 9 }
        };

        foreach (var hour in times)
        {
            var when = DateTime.Today.AddHours(hour);
            await CreateCalendarEvent(rx.MedicationName, rx.DosageText, when);
        }
    }

    private void HideHealthTips() => showHealthTipsModal = false;


    private async Task LoadPersonalizedHealthSummary()
    {
        isSummaryLoading = true;
        personalizedHealthHtml = string.Empty;

		// Retrieve patient ID from secure storage
        var vh_patientId = await SecureStorage.GetItemAsync("vh_patient_id");
        var userId = await SecureStorage.GetUserIdAsync();

        // ⚠️ TEMP: fallback for local testing only – remove before production
        if (string.IsNullOrWhiteSpace(vh_patientId))
            vh_patientId = "01978609-4506-72a9-a00e-8083bbf66207"; // TEMP TEST ID

        if (string.IsNullOrWhiteSpace(userId))
            userId = "richie1@gmail.com";
    
        try
        {
            var requestData = new
            {
                prompt = "Give me a personalized health summary",
                patientId = vh_patientId,
                userId = userId
            };

            // ✅ Call correct endpoint (under Medplum controller if that’s where /generate is hosted)
            var response = await MedPlumHttpClient.Client.PostAsJsonAsync("/api/Medplum/generate", requestData);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<AIResponse>();
                personalizedHealthHtml = ExtractDivHtml(result?.htmlResponse);
            }
            else
            {
                personalizedHealthHtml = "<div class='text-danger'>AI could not generate the summary. Please try later.</div>";
            }
        }
        catch (Exception ex)
        {
            personalizedHealthHtml = $"<div class='text-danger'>Error: {ex.Message}</div>";
        }
        finally
        {
            isSummaryLoading = false;
            StateHasChanged();
        }
    }

    private List<LabResultItem> GetDistinctLatestRecords(List<LabResultItem> items) =>
        items.GroupBy(i => i.CodeDisplay).Select(g => g.OrderByDescending(i => i.EffectiveDateTime).First()).ToList();

    private string GetLabInterpretation(string code, string value)
    {
        if (code.Contains("Hemoglobin A1c") && double.TryParse(value.Replace("%", ""), out var a1c))
        {
            return a1c >= 6.5 ? "Diabetes" : a1c >= 5.7 ? "Prediabetes range" : "Normal";
        }
        return "Normal";
    }

    private string GetVitalNote(string code, string value)
    {
        if (code.Contains("Heart rate") && int.TryParse(value.Split(' ')[0], out var hr))
        {
            return hr >= 60 && hr <= 100 ? "Normal resting HR" : hr < 60 ? "Low" : "Elevated";
        }
        return "Normal";
    }

    private string GetSurveyInterpretation(string scoreText)
    {
		if (!string.IsNullOrEmpty(scoreText))
		{
            scoreText = scoreText.Replace("score", "").Trim();
		}
        if (int.TryParse(scoreText, out var score))
        {
            if (score <= 4) return "Minimal or no depression";
            if (score <= 9) return "Mild depressive symptoms. Monitor regularly.";
            if (score <= 14) return "Moderate depression. Suggest follow-up.";
        }
        return "Unknown";
    }

    public class LabResultItem
    {
        public string CodeDisplay { get; set; }
        public string Value { get; set; }
        public string CapturedBy { get; set; } = string.Empty;
        public string Categories { get; set; } = string.Empty;
        public DateTime EffectiveDateTime { get; set; }
    }

    public class LabResultResponse
    {
        public List<LabResultItem> GeneralLabs { get; set; }
        public List<LabResultItem> ImagingResults { get; set; }
    }
    public class AIResponse
    {
        public string htmlResponse { get; set; }
    }

    public class PatientProfileInput
    {
        public string PatientId { get; set; }
        public string PatientName { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Gender { get; set; }
        public string BirthDate { get; set; }
        public string PhoneNumber { get; set; }
    }
    public static string ExtractDivHtml(string rawJson)
    {
        if (string.IsNullOrWhiteSpace(rawJson))
            return "<div><p>No AI response received.</p></div>";

        try
        {
            // First parse the string into JSON
            var outerDoc = JsonDocument.Parse(rawJson);
            var innerRaw = outerDoc.RootElement.GetProperty("response").GetString();

            // Decode escaped characters (from double serialization)
            var cleaned = innerRaw?
                .Replace("\\n", "\n")
                .Replace("\\\"", "\"")
                .Replace("\\'", "'") // optional
                .Trim();

            // Exclude all text before the first <div>
            if (!string.IsNullOrEmpty(cleaned))
            {
                var divIndex = cleaned.IndexOf("<div>", StringComparison.OrdinalIgnoreCase);
                if (divIndex >= 0)
                {
                    cleaned = cleaned.Substring(divIndex);
                }
            }
            return cleaned ?? "<div><p>Empty AI response.</p></div>";
        }
        catch (Exception ex)
        {
            return $"<div><p>Error parsing AI response: {ex.Message}</p></div>";
        }
    }
}
