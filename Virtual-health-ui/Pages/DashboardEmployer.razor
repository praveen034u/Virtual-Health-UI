@page "/employer-dashboard"
@using System.Text.Json;
@inject IJSRuntime JS
@inject HttpClient Http
@inject SecureStorageService SecureStorage

<h3>Posted Jobs</h3>

<table>
    <thead>
        <tr>
            <th>Title</th>
            <th>Company</th>
            <th>Location</th>
            <th>Employment Type</th>
            <th>Posted Date</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var job in postedJobs)
        {
            <tr>
                <td>@job.Title</td>
                <td>@job.Company</td>
                <td>@job.Location</td>
                <td>@job.JobType</td>
                <td>@job.PostedDate.ToShortDateString()</td>
                <td><button class="disable-button">Disable</button></td>
                <td><button class="get-profiles-button" @onclick="() => GetProfiles(job.Id)">Get Profiles</button></td>
            </tr>
        }
    </tbody>
</table>
<br/>
<hr />

@if (showProfiles)
{
    <h3>List of Matching Profiles</h3>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Years of Experience</th>
                <th>Location</th>
                <th>Matching Score(%)</th>
                <th>Resume</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var profile in matchingProfiles)
            {
                <tr>
                    <td>@profile.Name.FirstName @profile.Name.LastName</td>
                    <td>@profile.YearsOfExperience Years</td>
                    <td>@(profile.IsLocalCandidate ? "Local" : "Non-Local")</td>
                    <td>Score: @profile.MatchScore.ToString("F2")</td>
                    <td>
                        <div hidden="@(string.IsNullOrEmpty(profile.ResumeUrl))">
                        <a href="@profile.ResumeUrl" download>Download Resume</a>
                       </div>    
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
	private List<Job> postedJobs = new();
	// private List<Job> postedJobs = new()
    // {
    //     new Job { Id = "1", Title = "Software Developer", Company = "ABC Inc.", Location = "New York, NY", JobType = "Full-Time", PostedDate = DateTime.Now },
    //     new Job { Id = "2", Title = "Data Analyst", Company = "XYZ Corp.", Location = "Los Angeles, CA", JobType = "Part-Time", PostedDate = DateTime.Now }
    // };

    private bool showProfiles = false;
    private List<Profile> matchingProfiles = new();

	protected override async Task OnInitializedAsync()
	{
		await GetPostedJobs();
	}

	private async Task GetPostedJobs()
	{
		var employerId = await SecureStorage.GetUserIdAsync();
		// Call the API endpoint to get posted jobs by employer
		var response = await Http.GetAsync($"/api/Jobs/jobsbyemployerId/{employerId}");
		if (!response.IsSuccessStatusCode)
		{
			Console.WriteLine("No Job found!!");
			return;
		}
		var jobJsonData = await response.Content.ReadAsStringAsync();
        postedJobs = JsonSerializer.Deserialize<List<Job>>(jobJsonData, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

	private async void GetProfiles(string jobId)
    {
		// Call the API endpoint to get posted jobs by employer
        var response = await Http.GetAsync($"/api/Jobs/search?jobid={jobId}");
        if (!response.IsSuccessStatusCode)
		{
			Console.WriteLine("No Job found!!");
			return;
		}
		var jobJsonData = await response.Content.ReadAsStringAsync();
        matchingProfiles = JsonSerializer.Deserialize<List<Profile>>(jobJsonData, new JsonSerializerOptions { PropertyNameCaseInsensitive = true })?? new List<Profile>();

        showProfiles = matchingProfiles.Count >0;
    }

    public class Profile
    {
		public NameModel Name { get; set; } = new NameModel();
		public int YearsOfExperience { get; set; } = 0;
		public bool IsLocalCandidate { get; set; } = true;
		public double MatchScore { get; set; } = 0;
		public string ResumeUrl { get; set; } = string.Empty;
	}
}
