@page "/create-profile"
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject SecureStorageService SecureStorage
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>Profile Settings</PageTitle>

<div class="container mt-5">
    <h2 class="text-center">Profile Settings</h2>

    <!-- Role Selection -->
    @if (string.IsNullOrEmpty(UserRole))
    {
        <div class="text-center mb-4">
            <h5>Select Your Role:</h5>
            <button class="btn btn-primary m-2" @onclick="@(() => SelectRole("Employee"))">I am an Employee</button>
            <button class="btn btn-success m-2" @onclick="@(() => SelectRole("Employer"))">I am an Employer</button>
        </div>
    }
    else
    {
        <EditForm Model="@userProfile" OnValidSubmit="SubmitProfile">
            <DataAnnotationsValidator />
            <div class="card p-4 shadow-sm">
                <h4 class="text-center">@UserRole Profile</h4>

                <!-- Common Fields -->
                <div class="mb-3">
                    <label class="form-label">First Name</label>
                    <InputText class="form-control" @bind-Value="userProfile.Name.FirstName" required />
                    <label class="form-label">Last Name</label>
                    <InputText class="form-control" @bind-Value="userProfile.Name.LastName" required />
                </div>

                <div class="mb-3">
                    <label class="form-label">Phone Number</label>
                    <InputText class="form-control" @bind-Value="userProfile.PhoneNumber" required />
                </div>

                <div class="mb-3">
                    <label class="form-label">Street</label>
                    <InputText class="form-control" @bind-Value="userProfile.Address.Street" />
                    <label class="form-label">City</label>
                    <InputText class="form-control" @bind-Value="userProfile.Address.City" />
                    <label class="form-label">State</label>
                    <InputText class="form-control" @bind-Value="userProfile.Address.State" />
                    <label class="form-label">Zip Code</label>
                    <InputText class="form-control" @bind-Value="userProfile.Address.ZipCode" />
                    <label class="form-label">Country</label>
                    <InputText class="form-control" @bind-Value="userProfile.Address.Country" />
                </div>

                <!-- Employee-Specific Fields -->
                @if (UserRole == "Employee")
                {

                    <div class="mb-3">
                        <label class="form-label">Upload Resume</label>
                        <div>
                            <label>Upload Resume</label>
                            <InputFile OnChange="UploadResume" />
                            <button type="button" class="btn btn-primary" @onclick="OpenPopup">Upload </button>
                        </div>

                        @if (showModal)
                        {
                            <div class="modal">
                                <div class="modal-content">
                                    <h4>Document Intelligence Extracted Skills</h4>
                                    <div>
                                        @foreach (var skill in extractedSkills)
                                        {
                                            <div>
                                                <input type="text" value="@skill" />
                                                <button @onclick="() => RemoveSkill(skill)">X</button>
                                            </div>
                                        }
                                    </div>
                                    <button @onclick="ApproveSkills">Approve</button>
                                    <button @onclick="CloseModal">Deny</button>
                                </div>
                            </div>
                        }
                        @* todo for Jitendra  *@

                        @* <InputFile class="form-control" @bind-Value="userProfile.EmployeeProfile.Resume" required /> *@
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Years of Experience</label>
                        <InputNumber class="form-control" @bind-Value="userProfile.EmployeeProfile.YearsOfExperience" required />
                    </div>

                    <div class="mb-3">
                        <div class="mb-3">
                             <div class="mb-2" hidden="@(string.IsNullOrEmpty(extSkillsText))">
                                <input type="text" id="extskills" class="form-control" @bind="extSkillsText" readonly />
                            </div>
                            <label class="form-label">Skills</label>
                           
                            @foreach (var skill in userProfile.EmployeeProfile.Skills)
                            {

                                <div class="row mb-2">
                                    <div class="col">
                                        <label class="form-label">Skill Name</label>
                                        <InputText class="form-control" @bind-Value="skill.Name" />
                                    </div>
                                    <div class="col">
                                        <label class="form-label">Proficiency</label>
                                        <InputNumber class="form-control" @bind-Value="skill.ProficiencyLevel" />
                                    </div>
                                </div>
                                <div class="mb-2">
                                    <button type="button" class="btn btn-danger" @onclick="@(() => RemoveSkill(skill))">Remove</button>
                                </div>
                            }
                            <div class="mb-2">
                                <button type="button" class="btn btn-secondary" @onclick="AddSkill">Add Skill</button>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Certifications</label>

                        <div class="mb-2">
                            <InputText class="form-control" @bind-value="certifications" />
                        </div>
                        @*  <div class="mb-2">
                            <button type="button" class="btn btn-secondary" @onclick="AddCertification">Add Certification</button>
                        </div> *@
                    </div>
                } else if (UserRole == "Employer")
                {
                    <div class="mb-3">
                        <label class="form-label">Company Name</label>
                        <InputText class="form-control" @bind-Value="userProfile.EmployerProfile.CompanyName" required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Company Website</label>
                        <InputText class="form-control" @bind-Value="userProfile.EmployerProfile.CompanyWebsiteUrl" />
                    </div>

                    <div class="mb-3">
                        <div class="mb-3">
                            <label class="form-label">Company Locations</label>
                            @foreach (var companyLocation in userProfile.EmployerProfile.CompanyLocations)
                            {

                                <div class="row mb-2">
                                    <div class="col">
                                        <label class="form-label">Streat</label>
                                        <InputText class="form-control" @bind-Value="companyLocation.Address" />
                                    </div>
                                    <div class="col">
                                        <label class="form-label">City</label>
                                        <InputNumber class="form-control" @bind-Value="companyLocation.City" />
                                    </div>
                                </div>
                                <div class="row mb-2">
                                    <div class="col">
                                        <label class="form-label">State</label>
                                        <InputText class="form-control" @bind-Value="companyLocation.State" />
                                    </div>
                                    <div class="col">
                                        <label class="form-label">Country</label>
                                        <InputNumber class="form-control" @bind-Value="companyLocation.Country" />
                                    </div>
                                </div>
                                <div class="row mb-2">
                                    <div class="col">
                                        <label class="form-label">Zip Code</label>
                                        <InputNumber class="form-control" @bind-Value="companyLocation.ZipCode" />
                                    </div>
                                </div>
                                <div class="mb-2">
                                    <button type="button" class="btn btn-danger" @onclick="@(() => RemoveLocation(companyLocation))">Remove</button>
                                </div>
                            }
                            <div class="mb-2">
                                <button type="button" class="btn btn-secondary" @onclick="AddLocation">Add Skill</button>
                            </div>
                        </div>
                    </div>
                }

                @if (!isUserProfileFound)
                {
                    <button type="submit" class="btn btn-primary w-100">Create Profile</button>

                    <!-- Option to go back and change role -->
                    <div class="text-center mt-3">
                        <a href="javascript:void(0);" @onclick="ResetRole">Change Role</a>
                    </div>
                }
                else
                {
                    <button type="submit" class="btn btn-primary w-100">Update Profile</button>
                }
            </div>
        </EditForm>
    }
</div>

@code {

    private bool showModal = false;
    private List<string> extractedSkills = new();
    private string UserRole;
    private bool isUserProfileFound;

    protected override async Task OnInitializedAsync()
    { 
        isUserProfileFound = false;
        var userProfileJson = await SecureStorage.GetItemAsync("sb_user_profile");
        if (userProfileJson != null)
        {
            userProfile = await SecureStorage.GetUserProfileAsync(userProfileJson);
            UserRole = await SecureStorage.GetItemAsync("user_role");
            isUserProfileFound =true;
        }
    }

    private async Task UploadResume(InputFileChangeEventArgs e)
    {
        var selectedFile = e.File;
        var message = string.Empty;

        if (selectedFile != null)
        {
            var content = new MultipartFormDataContent();
            var fileStream = selectedFile.OpenReadStream(selectedFile.Size);
            var streamContent = new StreamContent(fileStream);
            content.Add(streamContent, "file", selectedFile.Name);

            var response = await Http.PostAsync("/api/uploadResume", content);
            if (response.IsSuccessStatusCode)
            {
                message = "File uploaded successfully!";
            }
            else
            {
                message = "File upload failed.";
            }
            var responseResumeJson = await response.Content.ReadAsStringAsync();
            var responseResume = JsonSerializer.Deserialize<Resume>(responseResumeJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            userProfile.EmployeeProfile.ResumeUrl = responseResume.ResumeUrl;
            extractedSkills = responseResume.extractedSkills;
            showModal = extractedSkills.Count > 0;
        }
    }


    private void RemoveSkill(string skill)
    {
        extractedSkills.Remove(skill);
    }
    private string extSkillsText = "";
    private void ApproveSkills()
    {
        // Logic to save skills
        // extSkillsText = string.Join(", ", userProfile.EmployeeProfile.Skills.Select(x => x.Name));
        extSkillsText = string.Join(", ", extractedSkills);

        showModal = false;
    }

    private void OpenPopup()
    {
        // Simulate skill extraction from the resume (Replace this with actual API call)
      

        //extractedSkills = new List<string> { "C#", ".NET", "Blazor", "Azure" };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    
    private UserProfile userProfile = new UserProfile() { EmployeeProfile= new EmployeeProfile(), EmployerProfile= new EmployerProfile()};

    private string certifications { get => string.Join(", ", userProfile.EmployeeProfile.Certifications); set => userProfile.EmployeeProfile.Certifications = value.Split(',').Select(c => c.Trim()).ToList(); }

    private async Task SelectRole(string role)
    {
        UserRole = role;
        userProfile.Role = role;
    }

    private void ResetRole()
    {
        UserRole = null;
        userProfile = new UserProfile();
    }

    private async Task SubmitProfile()
    {
        // var accessToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "access_token");
        userProfile.Email = await SecureStorage.GetUserIdAsync();
        var response = await Http.PostAsJsonAsync("/api/userprofiles/CreateProfile", userProfile);
        if (response.IsSuccessStatusCode)
        {
            var userProfileJson = await response.Content.ReadAsStringAsync();
            userProfile = await SecureStorage.GetUserProfileAsync(userProfileJson);
            
            SecureStorage.SetItemAsync("sb_user_profile", userProfileJson);
            SecureStorage.SetItemAsync("user_role", userProfile.Role);
          
            if (UserRole == "Employee")
            {
                Navigation.NavigateTo("/employee-dashboard", forceLoad: true);
            }
            else if (UserRole == "Employer")
            {
                Navigation.NavigateTo("/employer-dashboard", forceLoad: true);
            }
            else
            {
                Navigation.NavigateTo("/", forceLoad: true);
            }
        }
    }

    private void AddSkill()
    {
        userProfile.EmployeeProfile.Skills.Add(new Skill());
    }

    private void RemoveSkill(Skill skill)
    {
        userProfile.EmployeeProfile.Skills.Remove(skill);
    }

    private void AddLocation()
    {
        userProfile.EmployerProfile.CompanyLocations.Add(new CompanyLocation());
    }

    private void RemoveLocation(CompanyLocation companyLocation)
    {
        userProfile.EmployerProfile.CompanyLocations.Remove(companyLocation);
    }

    /// <summary>
    /// if user approves the skills then consent will be true else we will set to false
    /// </summary>
    /// <param name="extractedSkillsFromPopup"></param>
    /// <param name="userConsent"></param>
    private void SetExtractedSkills(List<string> extractedSkillsFromPopup, bool userConsent)
    { 
		userProfile.EmployeeProfile.Skills = extractedSkillsFromPopup.Select(skill => new Skill { Name = skill }).ToList();

        // close the popup
    }

    public class Resume
    {
		public string ResumeUrl { get; set; } = string.Empty;
        public List<string> extractedSkills { get; set; }=  new List<string>(); 
    }   

}
