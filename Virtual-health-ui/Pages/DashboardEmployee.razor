@page "/employee-dashboard"
@using System.Text.Json;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject SecureStorageService SecureStorage


<PageTitle>Skill Match Recommendations</PageTitle>

<h3>Job Recommendations Based on Your Skills</h3>

@if (isLoading)
{
    <p>Loading recommendations...</p>
}
else if (jobRecommendations == null || !jobRecommendations.Any())
{
    <p>No job recommendations available. Please update your profile to improve recommendations.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Job Title</th>
                <th>Company</th>
                <th>Location</th>
                <th>Matching Score (%)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var recommendation in jobRecommendations)
            {
                <tr>
                    <td>@recommendation.Job.Title</td>
                    <td>@recommendation.Job.Company</td>
                    <td>@recommendation.Job.Location</td>
                    <td>@recommendation.MatchingScore</td>
                    <td>
                        @if (!recommendation.HasApplied)
                        {
                            <button class="btn btn-primary btn-sm" @onclick="() => ApplyJob(recommendation)">Apply</button>
                        }
                        else
                        {
                            <span class="badge bg-success">Applied</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass mt-3">@message</div>
}

@code {
    private List<JobRecommendation> jobRecommendations;
    private bool isLoading = true;
    private string message;
    private string alertClass; // "alert-success" or "alert-danger"
    private string userId;
    protected override async Task OnInitializedAsync()
    {
        // Call the API endpoint to get job recommendations.
        userId = await SecureStorage.GetUserIdAsync();
        // Call the API endpoint to get job recommendations.
        // jobRecommendations = await Http.GetFromJsonAsync<List<JobRecommendation>>($"/jobs/recommend/{userId}");


        var response = await Http.GetAsync($"/jobs/recommend/{userId}");
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine("No Job found!!");
            return;
        }
        var jobJsonData = await response.Content.ReadAsStringAsync();
        jobRecommendations = MockJobRecommendation(); //JsonSerializer.Deserialize < List < JobRecommendation >> (jobJsonData, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        isLoading = false;

    }

    private async Task ApplyJob(JobRecommendation recommendation)
    {
        var userProfileJson = await SecureStorage.GetItemAsync("sb_user_profile");
        if (userProfileJson != null)
        {
            var userProfile = await SecureStorage.GetUserProfileAsync(userProfileJson);
			userProfile.EmployeeProfile.AppliedJobs.Add(recommendation.Job.Id);

            // Call the API endpoint to apply for the job
            var response = await Http.PutAsJsonAsync($"/api/userprofile", userProfile);
            if (response.IsSuccessStatusCode)
            {
                recommendation.HasApplied = true;
                message = $"Successfully applied for {recommendation.Job.Title}.";
                alertClass = "alert-success";
            }
            else
            {
                message = "Failed to apply for the job. Please try again later.";
                alertClass = "alert-danger";
            }
        }
    }


    private List<JobRecommendation> MockJobRecommendation()
    { 
        return new List<JobRecommendation>
                {
                    new JobRecommendation
                    {
                        Job = new Job
                        {
                            Id = "1",
                            Title = "Software Engineer",
                            Company = "Tech Corp",
                            Location = "New York, NY",
                            Description = "Develop and maintain software applications.",
                            Skills = new List<string> { "C#", "ASP.NET", "SQL" },
                            JobType = "Full-time",
                            Salary = 90000,
                            PostedByUserId = "user123",
                            PostedDate = DateTime.Now.AddDays(-10),
                            IsActive = true
                        },
                        MatchingScore = 85,
                        HasApplied = false
                    },
                    new JobRecommendation
                    {
                        Job = new Job
                        {
                            Id = "2",
                            Title = "Data Analyst",
                            Company = "Data Insights",
                            Location = "San Francisco, CA",
                            Description = "Analyze and interpret complex data sets.",
                            Skills = new List<string> { "Python", "SQL", "Tableau" },
                            JobType = "Contract",
                            Salary = 70000,
                            PostedByUserId = "user456",
                            PostedDate = DateTime.Now.AddDays(-5),
                            IsActive = true
                        },
                        MatchingScore = 90,
                        HasApplied = false
                    }
                };
        isLoading = false;
    }
}
