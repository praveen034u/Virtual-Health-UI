@page "/ai-health-prediction"

@using System.Net.Http.Json
@inject MedplumWrapperApiHttpClient MedPlumHttpClient
@inject SecureStorageService SecureStorage
@inject IJSRuntime JS
@implements IDisposable

<h3 class="mt-4 mb-4 text-primary">BioVitals Live - Wellness Status in Real-Time</h3>

@if (alertMessage is not null)
{
    <div class="alert @alertClass alert-dismissible fade show" role="alert">
        @alertMessage
        <button type="button" class="btn-close" aria-label="Close" @onclick="() => alertMessage = null"></button>
    </div>
}

<div class="row gx-4 gy-4">
    <!-- Heart Rate Card -->
    <div class="col-md-4 d-flex">
        <div class="card chart-card flex-fill d-flex flex-column">
            <div class="card-header">‚ù§Ô∏è Heart Rate (bpm)</div>
            <div class="card-body flex-fill position-relative">
                @if (isLoading)
                {
                    <div class="chart-overlay">
                        <div class="spinner-border text-danger" role="status"></div>
                    </div>
                }
                <canvas id="hrCanvas"></canvas>
            </div>
            <div class="card-footer text-muted small">
                Last updated: @lastUpdated
            </div>
        </div>
    </div>

    <!-- SpO‚ÇÇ Card -->
    <div class="col-md-4 d-flex">
        <div class="card chart-card flex-fill d-flex flex-column">
            <div class="card-header">ü©∏ Blood Oxygen (%)</div>
            <div class="card-body flex-fill position-relative">
                @if (isLoading)
                {
                    <div class="chart-overlay">
                        <div class="spinner-border text-primary" role="status"></div>
                    </div>
                }
                <canvas id="spo2Canvas"></canvas>
            </div>
            <div class="card-footer text-muted small">
                Last updated: @lastUpdated
            </div>
        </div>
    </div>

    <!-- Sleep Card -->
    <div class="col-md-4 d-flex">
        <div class="card chart-card flex-fill d-flex flex-column">
            <div class="card-header">üåô Sleep (Last 7 Days)</div>
            <div class="card-body flex-fill position-relative">
                @if (sleepLoading)
                {
                    <div class="chart-overlay">
                        <div class="spinner-border text-secondary" role="status"></div>
                    </div>
                }
                <canvas id="sleepCanvas"></canvas>
            </div>
            <div class="card-footer text-muted small">
                &nbsp;
            </div>
        </div>
    </div>
    <!-- Respiratory Rate Card -->
    <div class="col-md-4 d-flex">
        <div class="card chart-card flex-fill d-flex flex-column">
            <div class="card-header">ü´Å Respiratory Rate (rpm)</div>
            <div class="card-body flex-fill position-relative">
                @if (isLoading)
                {
                    <div class="chart-overlay">
                        <div class="spinner-border text-info" role="status"></div>
                    </div>
                }
                <canvas id="respiratoryCanvas"></canvas>
            </div>
            <div class="card-footer text-muted small">
                Last updated: @lastUpdated
            </div>
        </div>
    </div>

    <!-- Glucose Monitor Card -->
    <div class="col-md-4 d-flex">
        <div class="card chart-card flex-fill d-flex flex-column">
            <div class="card-header">ü©∏ Glucose Monitor (mg/dL)</div>
            <div class="card-body flex-fill position-relative">
                @if (isLoading)
                {
                    <div class="chart-overlay">
                        <div class="spinner-border text-warning" role="status"></div>
                    </div>
                }
                <canvas id="glucoseCanvas"></canvas>
            </div>
            <div class="card-footer text-muted small">
                Last updated: @lastUpdated
            </div>
        </div>
    </div>
    <!-- Prediction Placeholder -->
    <div class="col-md-4 d-flex">
        <div class="card chart-card flex-fill d-flex flex-column">
            <div class="card-header">‚ù§Ô∏è‚Äçü©π Prediction</div>
            <div class="card-body flex-fill position-relative d-flex align-items-center justify-content-center">
                <span class="text-muted">Coming Soon</span>
            </div>
            <div class="card-footer text-muted small">
                &nbsp;
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLoading = true;
    private string lastUpdated = "--:--:--";
    private string? alertMessage;
    private string alertClass = "alert-warning";
    private const string hrKey = "hrCanvas";
    private const string spo2Key = "spo2Canvas";
    private const string respiratoryKey = "respiratoryCanvas";
    private const string glucoseKey = "glucoseCanvas";
    private bool sleepLoading;
    private const string sleepKey = "sleepCanvas";
    private System.Timers.Timer? timer;

    private string? patientId;

    protected override async Task OnInitializedAsync()
    {
        patientId = await SecureStorage.GetItemAsync("vh_patient_id");
    }

    private string GetVitalsApiUrl() =>
        $"/api/vitals/01969d19-eb2d-76df-ae3c-aac3f174667b?durationMinutes=30";

    private string GetSleepApiUrl() =>
        $"/api/Medplum/vitals-trend/01969d19-eb2d-76df-ae3c-aac3f174667b";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await JS.InvokeVoidAsync("vitalsCharts.createStatic", hrKey, "Heart Rate (bpm)", "#e74c3c", new string[0], new double[0]);
        await JS.InvokeVoidAsync("vitalsCharts.createStatic", spo2Key, "SpO‚ÇÇ (%)", "#3498db", new string[0], new double[0]);
        await JS.InvokeVoidAsync("vitalsCharts.createStatic", respiratoryKey, "Respiratory Rate (rpm)", "#17a2b8", new string[0], new double[0]);
        await JS.InvokeVoidAsync("vitalsCharts.createStatic", glucoseKey, "Glucose Monitor (mg/dL)", "#ffc107", new string[0], new double[0]);
        await JS.InvokeVoidAsync("vitalsCharts.createMultiBar", sleepKey, new string[0], new object[0]);
        

        timer = new System.Timers.Timer(10_000);
        timer.Elapsed += async (_, __) => await RefreshVitalsAsync();
        timer.Start();

        await RefreshVitalsAsync();
        await LoadSleepAsync();
    }

    private async Task RefreshVitalsAsync()
    {
        if (string.IsNullOrEmpty(patientId))
            return;

        isLoading = true;
        StateHasChanged();

        var readings = await MedPlumHttpClient.Client.GetFromJsonAsync<List<VitalsReading>>(GetVitalsApiUrl()) ?? new();
        if (readings.Count > 180)
            readings = readings.Skip(readings.Count - 180).ToList();

        var latest = readings.LastOrDefault();
        if (latest != null)
        {
            if (latest.HeartRate > 120)
            {
                alertMessage = $"‚ö†Ô∏è High heart rate: {latest.HeartRate} bpm";
                alertClass = "alert-danger";
            }
            else if (latest.Spo2 < 90)
            {
                alertMessage = $"‚ö†Ô∏è Low SpO‚ÇÇ: {latest.Spo2}%";
                alertClass = "alert-danger";
            }
            else
            {
                alertMessage = null;
            }
        }

        var labels = readings.Select(r => r.Time.ToLocalTime().ToString("HH:mm:ss")).ToArray();
        var hrVals = readings.Select(r => r.HeartRate).ToArray();
        var spVals = readings.Select(r => r.Spo2).ToArray();
        var respVals = readings.Select(r => r.respiratoryRate).ToArray();
        var glucoseVals = readings.Select(r => r.bloodGlucose).ToArray();

        await JS.InvokeVoidAsync("vitalsCharts.update", hrKey, labels, hrVals);
        await JS.InvokeVoidAsync("vitalsCharts.update", spo2Key, labels, spVals);
        await JS.InvokeVoidAsync("vitalsCharts.update", respiratoryKey, labels, respVals);
        await JS.InvokeVoidAsync("vitalsCharts.update", glucoseKey, labels, glucoseVals);

        lastUpdated = DateTime.Now.ToString("HH:mm:ss");
        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadSleepAsync()
    {
        if (string.IsNullOrEmpty(patientId))
            return;

        sleepLoading = true;
        StateHasChanged();

        var all = await MedPlumHttpClient.Client.GetFromJsonAsync<List<TrendPoint>>(GetSleepApiUrl()) ?? new();

        var sleepPoints = all
          .Where(p =>
             p.Type.Equals("sleepDuration", StringComparison.OrdinalIgnoreCase)
          || p.Type.Equals("sleepRestlessnessIndex", StringComparison.OrdinalIgnoreCase))
          .OrderBy(p => p.Timestamp)
          .ToList();

        var byDay = sleepPoints
          .GroupBy(p => p.Timestamp.Date)
          .OrderByDescending(g => g.Key)
          .Take(7)
          .OrderBy(g => g.Key)
          .ToList();

        var labels = byDay.Select(g => g.Key.ToString("MM/dd")).ToArray();
        var durationData = byDay
          .Select(g =>
             g.FirstOrDefault(p => p.Type.Equals("sleepDuration", StringComparison.OrdinalIgnoreCase))
              ?.Value
             ?? 0)
          .ToArray();
        var qualityData = byDay
          .Select(g =>
          {
              var rest = g.FirstOrDefault(p => p.Type.Equals("sleepRestlessnessIndex", StringComparison.OrdinalIgnoreCase))
                   ?.Value
                ?? 0;
              return 100.0 - rest;
          })
          .ToArray();

        var datasets = new[]
        {
            new {
                label           = "Duration (h)",
                data            = durationData,
                backgroundColor = "#6c757d88",
                borderColor     = "#6c757d"
            },
            new {
                label           = "Quality (%)",
                data            = qualityData,
                backgroundColor = "#28a74588",
                borderColor     = "#28a745"
            }
        };

        await JS.InvokeVoidAsync("vitalsCharts.updateMultiBar", sleepKey, labels, datasets);

        sleepLoading = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        timer?.Stop();
        timer?.Dispose();
    }

    private class VitalsReading
    {
        public DateTime Time { get; set; }
        public double HeartRate { get; set; }
        public double Spo2 { get; set; }
        public double respiratoryRate { get; set; }
        public double bloodGlucose { get; set; }
    }

    private class TrendPoint
    {
        public DateTime Timestamp { get; set; }
        public string Type { get; set; } = "";
        public double Value { get; set; }
    }
}
