@page "/alerts"
@using VirtualHealth.UI.Models
@using VirtualHealth.UI.Services
@inject AlertService AlertService

<h3 class="text-primary mt-3 mb-4">🔔 Patient Alert Dashboard</h3>

@if (alerts == null)
{
    <p>Loading alerts...</p>
}
else if (!alerts.Any())
{
    <p>No alerts found.</p>
}
else
{
    <table class="table table-hover shadow">
        <thead class="table-light">
            <tr>
                <th>Alert Type</th>
                <th>Date & Time</th>
                <th>Triggered By</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var alert in alerts)
            {
                <tr>
                    <td>
                        <span class="badge @GetBadgeClass(alert.AlertType)">
                            @alert.AlertType
                        </span>
                    </td>
                    <td>@alert.Timestamp.ToLocalTime().ToString("dd MMM yyyy, hh:mm tt")</td>
                    <td>
                        <ul class="mb-0 ps-3 small">
                            @foreach (var key in new[] { "heartRate", "spo2", "respiratoryRate", "bloodGlucose" })
                            {
                                if (alert.TriggeredBy != null &&
                                alert.TriggeredBy.TryGetValue(key, out var value) &&
                                value.HasValue)
                                {
                                    <li>
                                        <strong>@ToLabel(key):</strong> @value
                                    </li>
                                }
                            }
                        </ul>
                    </td>
                    <td>
                        <span class="text-dark fw-semibold">@alert.Message</span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<AlertModel> alerts;
    private static HttpClient _httpClient;

    protected override async Task OnInitializedAsync()
    {
        alerts = await AlertService.GetAlertsAsync();
    }

    private string GetBadgeClass(string type) =>
        type?.ToLower() switch
        {
            "heartrate" or "highheartrate" => "bg-danger",
            "spo2" or "lowspo2" => "bg-warning",
            _ => "bg-secondary"
        };

    private string ToLabel(string key) =>
        key.ToLowerInvariant() switch
        {
            "heartrate" => "HR",
            "spo2" => "SpO₂",
            "respiratoryrate" => "Resp",
            "bloodglucose" => "Glucose",
            _ => key
        };
}
