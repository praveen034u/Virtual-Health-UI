@page "/job-search"

@inject HttpClient Http

<PageTitle>Job Search</PageTitle>

<h3>Job Search</h3>

<EditForm Model="@searchModel" OnValidSubmit="@PerformSearch">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="skills">Skills (comma-separated):</label>
        <InputText id="skills" class="form-control" @bind-Value="searchModel.Skills" placeholder="e.g. carpenter,cook,plumber" />
    </div>

    <div class="mb-3">
        <label for="location">Location:</label>
        <InputText id="location" class="form-control" @bind-Value="searchModel.Location" placeholder="Enter location..." />
    </div>

    <div class="mb-3">
        <label for="employer">Employer Name:</label>
        <InputText id="employer" class="form-control" @bind-Value="searchModel.EmployerName" placeholder="Enter employer name..." />
    </div>

    @*     <div class="mb-3">
<label for="sort">Sort By Date:</label>
<select id="sort" class="form-control" @bind="searchModel.SortByDate">
<option value="desc">Newest First</option>
<option value="asc">Oldest First</option>
</select>
</div> *@

    <button type="submit" class="btn btn-primary">Search Jobs</button>
</EditForm>

@if (isSearching)
{
    <p>Searching for jobs...</p>
}
@if (jobs != null)
{
    @if (jobs.Any())
    {
        <table class="table mt-3">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Employer</th>
                    <th>Location</th>
                    <th>Posted Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var job in jobs.OrderByDescending(x => x.PostedDate))
                {
                    <tr>
                        <td>@job.Title</td>
                        <td>@job.Company</td>
                        <td>@job.Location</td>
                        <td>@job.PostedDate.ToShortDateString()</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No jobs found matching your criteria.</p>
    }
}

@code {
    private SearchModel searchModel = new();
    private List<Job> jobs;
    private bool isSearching = false;

    private async Task PerformSearch()
    {
        isSearching = true;
        // Build query parameters (make sure to encode values)
        var query = $"?searchbyLocation={Uri.EscapeDataString(searchModel.Location ?? string.Empty)}" +
                    $"&searchbySkill={Uri.EscapeDataString(searchModel.Skills ?? string.Empty)}" +
                    $"&searchbyEmployerName={Uri.EscapeDataString(searchModel.EmployerName ?? string.Empty)}"; // +$"&sortByDate={searchModel.SortByDate}";
                                                                                                               // Call the API endpoint for job search
        jobs = await Http.GetFromJsonAsync<List<Job>>($"api/search{query}");
        isSearching = false;
    }

    public class SearchModel
    {
        public string Location { get; set; }
        public string Skills { get; set; }
        public string EmployerName { get; set; }
        public string SortByDate { get; set; } = "desc"; // Default sort: newest first
    }
}