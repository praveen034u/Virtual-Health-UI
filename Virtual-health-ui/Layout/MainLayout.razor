@using VirtualHealth.UI.Models
@using VirtualHealth.UI.Pages
@using VirtualHealth.UI.Services

@inherits LayoutComponentBase

@inject NavigationManager Navigation
@inject AlertService AlertService
@inject SecureStorageService SecureStorage
@inject AlertPanelStateService AlertPanelState
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">
        @if (!Navigation.Uri.Contains("VirtualHealthhome") && !Navigation.Uri.EndsWith("/") && !Navigation.Uri.EndsWith("/#"))
        {
            <div class="col-md-2 bg-light p-0 shadow-sm d-none d-md-block">
                <NavMenu />
            </div>

            <div class="col-md-10 col-12 position-relative">
                <div class="top-row px-3 py-2 d-flex justify-content-end align-items-center shadow-sm bg-white">
                    
                        @if (!string.IsNullOrEmpty(userId))
                        {
                        <div class="d-flex align-items-center gap-2 small text-muted justify-content-start">
                            <span class="me-1">Hello, <strong>@userId</strong>!</span>
                            <button class="nav-link btn btn-link me-3" @onclick="BeginLogOut">Log out</button>
                        </div>
                        }
                    <NotificationBell />
                  
                </div>

                <div id="alertPanel"
                     class="alert-dropdown-panel position-absolute bg-white shadow p-3 rounded"
                     style="top:60px;right:20px;z-index:1050;display:@(AlertPanelState.IsVisible ? "block" : "none");">
                    @if (isLoading)
                    {
                        <p><i class="bi bi-hourglass-split text-muted"></i> Loading alerts...</p>
                    }
                    else if (!alerts.Any())
                    {
                        <p class="mb-0">No alerts available.</p>
                    }
                    else
                    {
                        <table class="table table-sm mb-0">
                            <thead class="table-light">
                                <tr><th>Type</th><th>Time</th><th>Message</th></tr>
                            </thead>
                            <tbody>
                                @foreach (var a in alerts.Take(5))
                                {
                                    <tr>
                                        <td>
                                            <span class="badge @GetBadgeClass(a.AlertType)">
                                                @GetIcon(a.AlertType) @a.AlertType
                                            </span>
                                        </td>
                                        <td>@a.Timestamp.ToLocalTime().ToString("hh:mm tt")</td>
                                        <td>@a.Message</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>

                <div class="main-content px-3 pt-3">
                    @Body
                </div>
            </div>
        }
        else
        {
            <main>
                <div class="top-row px-4 d-flex justify-content-end align-items-center gap-3">
                    
                    <NotificationBell />
                    <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
                </div>

                <article class="content px-4">
                    @Body
                </article>
            </main>
        }
    </div>
</div>

@code {
    private List<AlertModel> alerts = new();
    private DotNetObjectReference<MainLayout>? objRef;
    private bool isLoading = true;
    private string? userId;

    private async Task BeginLogOut()
    {
        var auth0Domain = "dev-jbrriuc5vyjmiwtx.us.auth0.com";
        var clientId = "V9Una2guriD6USXmVHCn4LVRZX9Ao479";
        var returnUrl = Navigation.BaseUri; // Ensures return to home after logout

        var logoutUrl = $"https://{auth0Domain}/v2/logout?client_id={clientId}&returnTo={Uri.EscapeDataString(returnUrl)}";

        await JSRuntime.InvokeVoidAsync("logoutAuth0", logoutUrl);
    }

    protected override async Task OnInitializedAsync()
    {
        AlertPanelState.OnChange += OnPanelStateChanged;
        userId = await SecureStorage.GetItemAsync("user_id");
    }

    private async Task OnPanelStateChanged()
    {
        StateHasChanged();
            isLoading = true;
        if (AlertPanelState.IsVisible)
        {
            alerts = await AlertService.GetAlertsAsync();
            isLoading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("alertComponent.registerOutsideClick", "alertPanel", objRef);
        }
    }

    [JSInvokable]
    public void CloseAlerts()
    {
        AlertPanelState.Hide();
        StateHasChanged();
    }

    string GetBadgeClass(string t) => t?.ToLower() switch
    {
        "heartrate" or "highheartrate" => "bg-danger",
        "spo2"      or "lowspo2"       => "bg-warning",
        _                               => "bg-secondary"
    };

    string GetIcon(string t) => t?.ToLower() switch
    {
        "heartrate" or "highheartrate" => "💓",
        "spo2"      or "lowspo2"       => "🌬️",
        "emergency"                    => "🚨",
        _                               => "🔔"
    };

    public void Dispose()
    {
        AlertPanelState.OnChange -= OnPanelStateChanged;
        objRef?.Dispose();
    }
}
